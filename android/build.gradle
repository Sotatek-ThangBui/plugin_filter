group 'com.plugin.filters.plugin_filters'
version '1.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.7.10'
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.gms:google-services:4.3.14'
        classpath 'com.google.dagger:hilt-android-gradle-plugin:2.43.2'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.9.2'
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}
def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    if (project.android.hasProperty("namespace")) {
        namespace 'com.plugin.filters.plugin_filters'
    }

    compileSdkVersion 33

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    defaultConfig {
        minSdkVersion 21
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
    ndkVersion '21.3.6528147'
}

dependencies {
    implementation project(':gpuimage')
    compileOnly files("$flutterRoot/bin/cache/artifacts/engine/android-arm/flutter.jar")
    implementation 'com.google.firebase:firebase-crashlytics-buildtools:2.9.9'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.mockito:mockito-core:5.1.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation platform('com.google.firebase:firebase-bom:31.2.2')
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-messaging-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-config-ktx'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation 'com.github.bumptech.glide:glide:4.13.2'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.7.10"
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    implementation 'com.github.bumptech.glide:glide:4.13.2'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.13.2'
    implementation "com.github.bumptech.glide:okhttp3-integration:4.13.2"
    // Face Mesh Detection
    implementation 'com.google.mlkit:face-mesh-detection:16.0.0-beta1'
    implementation 'com.google.mlkit:camera:16.0.0-beta3'

    // Retrofit
    api 'com.squareup.retrofit2:converter-scalars:2.9.0'
    api "com.squareup.retrofit2:retrofit:2.9.0"
    api "com.squareup.retrofit2:converter-gson:2.9.0"
    api "com.squareup.retrofit2:adapter-rxjava2:2.9.0"
    api 'com.squareup.okhttp3:okhttp:5.0.0-alpha.5'
    api 'io.reactivex.rxjava2:rxandroid:2.1.1'
    api 'io.reactivex.rxjava2:rxjava:2.2.21'
    api 'com.squareup.retrofit2:adapter-rxjava2:2.9.0'
    api('com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.5')
    implementation 'com.google.mediapipe:solution-core:latest.release'
    implementation 'com.google.mediapipe:facemesh:latest.release'
    implementation 'com.google.mediapipe:facedetection:latest.release'
//
    def room_version = "2.5.0"
    implementation "androidx.room:room-ktx:$room_version"
}
